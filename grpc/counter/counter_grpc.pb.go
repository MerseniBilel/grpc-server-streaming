// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: counter.proto

package counter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterServiceClient is the client API for CounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterServiceClient interface {
	InitCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (CounterService_InitCounterClient, error)
}

type counterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterServiceClient(cc grpc.ClientConnInterface) CounterServiceClient {
	return &counterServiceClient{cc}
}

func (c *counterServiceClient) InitCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (CounterService_InitCounterClient, error) {
	stream, err := c.cc.NewStream(ctx, &CounterService_ServiceDesc.Streams[0], "/counter.counterService/InitCounter", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterServiceInitCounterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CounterService_InitCounterClient interface {
	Recv() (*CounterResponse, error)
	grpc.ClientStream
}

type counterServiceInitCounterClient struct {
	grpc.ClientStream
}

func (x *counterServiceInitCounterClient) Recv() (*CounterResponse, error) {
	m := new(CounterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CounterServiceServer is the server API for CounterService service.
// All implementations must embed UnimplementedCounterServiceServer
// for forward compatibility
type CounterServiceServer interface {
	InitCounter(*CounterRequest, CounterService_InitCounterServer) error
	mustEmbedUnimplementedCounterServiceServer()
}

// UnimplementedCounterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCounterServiceServer struct {
}

func (UnimplementedCounterServiceServer) InitCounter(*CounterRequest, CounterService_InitCounterServer) error {
	return status.Errorf(codes.Unimplemented, "method InitCounter not implemented")
}
func (UnimplementedCounterServiceServer) mustEmbedUnimplementedCounterServiceServer() {}

// UnsafeCounterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServiceServer will
// result in compilation errors.
type UnsafeCounterServiceServer interface {
	mustEmbedUnimplementedCounterServiceServer()
}

func RegisterCounterServiceServer(s grpc.ServiceRegistrar, srv CounterServiceServer) {
	s.RegisterService(&CounterService_ServiceDesc, srv)
}

func _CounterService_InitCounter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CounterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CounterServiceServer).InitCounter(m, &counterServiceInitCounterServer{stream})
}

type CounterService_InitCounterServer interface {
	Send(*CounterResponse) error
	grpc.ServerStream
}

type counterServiceInitCounterServer struct {
	grpc.ServerStream
}

func (x *counterServiceInitCounterServer) Send(m *CounterResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CounterService_ServiceDesc is the grpc.ServiceDesc for CounterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counter.counterService",
	HandlerType: (*CounterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitCounter",
			Handler:       _CounterService_InitCounter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "counter.proto",
}
